# -*- coding: utf-8 -*-
"""Regularaization using keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JjWztC2EwoB_4K-qsBjfg_m6tsO9sO_x
"""

# Baseline Model on the Sonar Dataset
import numpy
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras import regularizers
from keras.utils import to_categorical
from keras import optimizers
from keras.optimizers import SGD

# fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)
# load dataset
dataframe = read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/sonar.all-data ", header=None)
dataset = dataframe.values
# split into input (X) and output (Y) variables
X = dataset[:,0:60].astype(float)
Y = dataset[:,60]

# encode class values as integers
dataframe[60] = [0 if x == 'R' else 1 for x in dataframe[60]]
encoded_Y = dataframe[60]
Y = to_categorical(encoded_Y)

model = Sequential()
model.add(Dense(60, kernel_regularizer=regularizers.l2(0.01),activity_regularizer=regularizers.l1(0.01),input_dim=(60), activation='relu' ))
model.add(Dense(30, activation='relu'))
model.add(Dense(2, activation='sigmoid'))

# Compile model
sgd = SGD(lr=0.01, momentum=0.8, decay=0.0, nesterov=False)
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])

model.fit(X,Y,epochs=300)

# Smaller Network
# create model
model = Sequential()
model.add(Dense(48, kernel_regularizer=regularizers.l2(0.01),activity_regularizer=regularizers.l1(0.01),input_dim=(60),activation='relu' ))
model.add(Dense(18, activation='relu'))
model.add(Dense(2, activation='sigmoid'))
# Compile model
# Compile model
sgd = SGD(lr=0.01, momentum=0.8, decay=0.0, nesterov=False)
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])

# Overfitting
# create model
model = Sequential()
model.add(Dense(512, input_dim=60,kernel_regularizer=regularizers.l2(0.1),activity_regularizer=regularizers.l1(0.1), activation='relu'))
model.add(Dense(64,  activation='relu'))
model.add(Dense(32,   activation='relu'))
model.add(Dense(18,  activation='relu'))
model.add(Dense(1,  activation='sigmoid'))

# Compile model
sgd = SGD(lr=0.1, momentum=0.8, decay=0.0, nesterov=False)
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])

# Tunning
# create model
model = Sequential()
model.add(Dense(30, input_dim=60, kernel_initializer='normal', activation='relu'))
model.add(Dense(18, kernel_initializer='normal', activation='relu'))
model.add(Dense(2, kernel_initializer='normal', activation='sigmoid'))
# Compile model
sgd = SGD(lr=0.01, momentum=0.8, decay=0.0, nesterov=False)
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])
model.fit(X,Y,epochs=300)







